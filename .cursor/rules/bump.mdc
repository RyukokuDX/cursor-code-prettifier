---
alwaysApply: false
---

# 更新のルール

変更仕様書のコミットとバージョンタグ付けの自動化ルール

## 概要

このルールは、変更仕様書のコミットとバージョンタグ付けに関するワークフローを定義します。

**注意**: VSIXファイルのビルドと組み合わせて使用する場合、VSIXビルドを先に実行してください。詳細は [vsix-update.mdc](./vsix-update.mdc) を参照してください。

### 変更仕様書のコミットルール

変更仕様書（`changement/` ディレクトリ内の `.md` ファイル）をコミットする際は、以下のルールに従って実行する:

1. **最新の変更仕様書を検出**
   - `changement/` ディレクトリ内の最新更新ファイルを自動検出
   - `_` で始まるファイル（例: `_release_notes.md`）は除外

2. **変更仕様書から情報を抽出**
   - **バージョン**: タイトルからバージョン番号を抽出（例: `# 変更仕様 v0.1.30: ...` → `0.1.30`）
   - **日付**: ファイルの最終更新日時を取得（YYYY-MM-DD形式）
   - **変更内容**: 以下の優先順位で抽出
     1. `## 変更` または `## 変更内容` セクション
     2. `## 仕様`、`## 目的`、`## 要件`、`## スコープ` セクション
     3. 見つからない場合はタイトルと最初の数行を使用

3. **コミットメッセージの生成**
   - 形式:
     ```
     doc: {ファイル名} (v{バージョン})
     
     日付: {YYYY-MM-DD}
     
     変更内容:
     {抽出した変更内容（最大10行）}
     ```

4. **Gitタグの作成**
   - コミット後に、変更仕様書から抽出したバージョンでGitタグを作成
   - タグ名: `v{バージョン}`（例: `v0.1.30`）
   - タグメッセージ: バージョンと変更内容を含む
   - 既存のタグがある場合はスキップ

## 実行方法

### 基本的な使い方

```bash
npm run commit-latest-spec
```

最新の変更仕様書を自動検出してコミットし、バージョンタグを作成します。

### オプション

```bash
# 特定のファイルを指定
npm run commit-latest-spec -- --file changement/v00_01_30_log_injection.md

# コミット後にプッシュ（タグも含む）
npm run commit-latest-spec -- --push

# タグを作成しない場合
npm run commit-latest-spec -- --no-tag

# 実行内容を確認のみ（実際には実行しない）
npm run commit-latest-spec -- --dry-run
```

## 実行フロー

1. **変更仕様書の検出**
   - `changement/` ディレクトリをスキャン
   - `*.md` ファイルで `_` で始まらないものを抽出
   - 最終更新日時が最新のファイルを選択

2. **情報の抽出**
   - ファイルをパースしてバージョン、日付、変更内容を抽出
   - ターミナルに抽出結果を表示

3. **Gitコミット**
   - 変更仕様書から抽出した情報を含むコミットメッセージを作成
   - 作成したコミットメッセージを変更仕様書ファイルの「## コミットメッセージ」セクションに追加または更新
     - セクションが存在しない場合は、ファイルの末尾に新しく追加
     - セクションが既に存在する場合は、内容を更新
   - 変更仕様書ファイルをステージング（`git add`）
   - 変更仕様書ファイルから「## コミットメッセージ」セクションの内容を抽出
   - 抽出したコミットメッセージを一時ファイル（`.git-commit-msg.tmp`）に書き込み
   - `git commit -F <一時ファイル>` を使用してコミットメッセージをファイルから読み込む
   - 複数行のコミットメッセージと特殊文字を安全に処理するため、`-m`オプションではなく`-F`オプションを使用
   - コミット後、一時ファイル（`.git-commit-msg.tmp`）を自動削除
   - **注意**: コミットメッセージは変更仕様書ファイルの「## コミットメッセージ」セクションに保存され、その内容がコミットに使用されます

4. **バージョンタグの作成**
   - バージョンが抽出できた場合、Gitタグを作成
   - 変更仕様書から抽出した情報を含むタグメッセージを作成し、一時ファイル（`.git-tag-msg.tmp`）に書き込み
     - **注意**: この一時ファイルは変更仕様書とは別の、スクリプト実行時に自動生成される一時的なファイルです
   - `git tag -a <タグ名> -F <一時ファイル>` を使用してタグメッセージをファイルから読み込む
   - タグが既に存在する場合は警告を表示してスキップ
   - コミットと同様に、`-F`オプションでファイルから読み込むことで複数行メッセージを安全に処理
   - タグ作成後、一時ファイル（`.git-tag-msg.tmp`）を自動削除
   - `--push` オプションが指定されている場合、タグもプッシュ

5. **リモートへのプッシュ**（オプション）
   - `--push` オプションが指定されている場合、コミットとタグをプッシュ

## コミットメッセージの例

```
doc: v00_01_30_log_injection.md (v0.1.30)

日付: 2025-01-26

変更内容:
## 背景
- VS Code / Cursor の拡張機能表示（拡張ギャラリー、拡張ビュー）の「変更点（Changelog）」や説明欄に、本機能の最新の変更ログが十分に反映されていない。
- 手動で README/CHANGELOG を編集する運用では抜け漏れが発生しやすい。

## 目的
- `build` または `bump-version` 実行時に、最新のログ断片（ハイライト、改善点、既知の注意点）を README と CHANGELOG（新規導入可）へ自動注入し、拡張の表示に反映される状態を常に保つ。
```

## タグの例

- タグ名: `v0.1.30`
- タグメッセージ:
  ```
  Version 0.1.30
  
  {変更内容の最初の部分}
  ```

## 注意事項

- **バージョンの抽出**: タイトルが `# 変更仕様 v{バージョン}: ...` の形式である必要があります
- **タグの重複**: 既に同じバージョンのタグが存在する場合、新規作成はスキップされます
- **変更内容の長さ**: コミットメッセージとタグメッセージには変更内容の最初の10行までが含まれます
- **コミットメッセージの保存場所**: コミットメッセージは変更仕様書ファイル内の「## コミットメッセージ」セクションに保存されます
  - このセクションはスクリプト実行時に自動的に追加または更新されます
  - 変更仕様書ファイルがコミットされると、このセクションも一緒にコミットされます
- **一時ファイル**: `git commit -F` で使用するため、変更仕様書から抽出したコミットメッセージを一時的に `.git-commit-msg.tmp` に書き込みます
  - タグメッセージも同様に `.git-tag-msg.tmp` に書き込みます
  - これらはスクリプト実行時に自動生成され、処理完了後に自動削除されます
- **`-F`オプションの使用**: `git commit -m`や`git tag -m`ではなく、`git commit -F`および`git tag -a -F`を使用して一時ファイルからコミットメッセージ/タグメッセージを読み込むことで、複数行メッセージと特殊文字を安全に処理できます

## エラーハンドリング

- 変更仕様書が見つからない場合: エラーで終了
- バージョンが抽出できない場合: コミットは実行されますが、タグは作成されません
- タグの作成に失敗した場合: 警告を表示しますが、コミットは成功として扱われます
- 既にコミット済み（差分がない）場合: スキップして終了

## スクリプトの場所

- スクリプト: `scripts/commit-latest-spec.js`
- package.jsonの定義: `npm run commit-latest-spec`

## 使用例

### 基本的な使用

```bash
# 最新の変更仕様書をコミットしてタグ付け
npm run commit-latest-spec
```

### プッシュも一緒に行う

```bash
npm run commit-latest-spec -- --push
```

### 事前確認

```bash
npm run commit-latest-spec -- --dry-run
```

このコマンドで、どのファイルが対象になり、どのようなコミットメッセージが生成されるか確認できます。
