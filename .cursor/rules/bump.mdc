---
alwaysApply: false
---

# 更新のルール

変更仕様書のコミットとバージョンタグ付けの自動化ルール、およびVSIXファイルの更新ワークフロー

## 概要

このルールは、変更仕様書のコミットとVSIXファイルの更新を組み合わせた完全なリリースワークフローを定義します。

### ワークフローの順序

**重要**: 必ず以下の順序で実行してください:

1. **変更仕様書の作成・編集** → `changement/` ディレクトリ内に変更仕様書を作成または更新
2. **VSIXファイルのビルド** → `npm run build-latest` を実行（この時点で`package.json`のバージョンが更新される）
3. **変更仕様書のコミットとタグ付け** → `npm run commit-latest-spec` を実行（更新されたバージョン情報が反映される）

### 変更仕様書のコミットルール

変更仕様書（`changement/` ディレクトリ内の `.md` ファイル）をコミットする際は、以下のルールに従って実行する:

1. **最新の変更仕様書を検出**
   - `changement/` ディレクトリ内の最新更新ファイルを自動検出
   - `_` で始まるファイル（例: `_release_notes.md`）は除外

2. **変更仕様書から情報を抽出**
   - **バージョン**: タイトルからバージョン番号を抽出（例: `# 変更仕様 v0.1.30: ...` → `0.1.30`）
   - **日付**: ファイルの最終更新日時を取得（YYYY-MM-DD形式）
   - **変更内容**: 以下の優先順位で抽出
     1. `## 変更` または `## 変更内容` セクション
     2. `## 仕様`、`## 目的`、`## 要件`、`## スコープ` セクション
     3. 見つからない場合はタイトルと最初の数行を使用

3. **コミットメッセージの生成**
   - 形式:
     ```
     doc: {ファイル名} (v{バージョン})
     
     日付: {YYYY-MM-DD}
     
     変更内容:
     {抽出した変更内容（最大10行）}
     ```

4. **Gitタグの作成**
   - コミット後に、変更仕様書から抽出したバージョンでGitタグを作成
   - タグ名: `v{バージョン}`（例: `v0.1.30`）
   - タグメッセージ: バージョンと変更内容を含む
   - 既存のタグがある場合はスキップ

## 実行方法

### 基本的な使い方

```bash
npm run commit-latest-spec
```

最新の変更仕様書を自動検出してコミットし、バージョンタグを作成します。

### オプション

```bash
# 特定のファイルを指定
npm run commit-latest-spec -- --file changement/v00_01_30_log_injection.md

# コミット後にプッシュ（タグも含む）
npm run commit-latest-spec -- --push

# タグを作成しない場合
npm run commit-latest-spec -- --no-tag

# 実行内容を確認のみ（実際には実行しない）
npm run commit-latest-spec -- --dry-run
```

## 実行フロー

1. **変更仕様書の検出**
   - `changement/` ディレクトリをスキャン
   - `*.md` ファイルで `_` で始まらないものを抽出
   - 最終更新日時が最新のファイルを選択

2. **情報の抽出**
   - ファイルをパースしてバージョン、日付、変更内容を抽出
   - ターミナルに抽出結果を表示

3. **Gitコミット**
   - 変更仕様書のみをステージング（`git add`）
   - 抽出した情報を含むコミットメッセージでコミット
   - 複数行のコミットメッセージを安全に処理（一時ファイルを使用）

4. **バージョンタグの作成**
   - バージョンが抽出できた場合、Gitタグを作成
   - タグが既に存在する場合は警告を表示してスキップ
   - `--push` オプションが指定されている場合、タグもプッシュ

5. **リモートへのプッシュ**（オプション）
   - `--push` オプションが指定されている場合、コミットとタグをプッシュ

## コミットメッセージの例

```
doc: v00_01_30_log_injection.md (v0.1.30)

日付: 2025-01-26

変更内容:
## 背景
- VS Code / Cursor の拡張機能表示（拡張ギャラリー、拡張ビュー）の「変更点（Changelog）」や説明欄に、本機能の最新の変更ログが十分に反映されていない。
- 手動で README/CHANGELOG を編集する運用では抜け漏れが発生しやすい。

## 目的
- `build` または `bump-version` 実行時に、最新のログ断片（ハイライト、改善点、既知の注意点）を README と CHANGELOG（新規導入可）へ自動注入し、拡張の表示に反映される状態を常に保つ。
```

## タグの例

- タグ名: `v0.1.30`
- タグメッセージ:
  ```
  Version 0.1.30
  
  {変更内容の最初の部分}
  ```

## 注意事項

- **バージョンの抽出**: タイトルが `# 変更仕様 v{バージョン}: ...` の形式である必要があります
- **タグの重複**: 既に同じバージョンのタグが存在する場合、新規作成はスキップされます
- **変更内容の長さ**: コミットメッセージとタグメッセージには変更内容の最初の10行までが含まれます
- **一時ファイル**: コミットメッセージとタグメッセージの処理に一時ファイルを使用します（自動削除）

## エラーハンドリング

- 変更仕様書が見つからない場合: エラーで終了
- バージョンが抽出できない場合: コミットは実行されますが、タグは作成されません
- タグの作成に失敗した場合: 警告を表示しますが、コミットは成功として扱われます
- 既にコミット済み（差分がない）場合: スキップして終了

## スクリプトの場所

- スクリプト: `scripts/commit-latest-spec.js`
- package.jsonの定義: `npm run commit-latest-spec`

## 使用例

### 基本的な使用

```bash
# 最新の変更仕様書をコミットしてタグ付け
npm run commit-latest-spec
```

### プッシュも一緒に行う

```bash
npm run commit-latest-spec -- --push
```

### 事前確認

```bash
npm run commit-latest-spec -- --dry-run
```

このコマンドで、どのファイルが対象になり、どのようなコミットメッセージが生成されるか確認できます。

---

## VSIXファイルの更新方法

VSIXファイルのビルドと変更仕様書のコミット・タグ付けを組み合わせた更新配布の手順

### 更新の流れ

1. **変更仕様書の作成・編集**
   - `changement/` ディレクトリ内の変更仕様書を作成または更新

2. **VSIXファイルのビルド**
   ```bash
   npm run build-latest
   ```

   このコマンドは以下を実行します:
   - バージョン更新（`package.json`のバージョンを更新）
   - リリースノート注入（README.mdとCHANGELOG.mdに最新の変更内容を追加）
   - TypeScriptのコンパイル
   - VSIXパッケージの作成
   - 固定名ファイル `cursor-code-prettifier-latest.vsix` の生成

3. **変更仕様書のコミットとタグ付け**
   ```bash
   npm run commit-latest-spec
   ```

   **重要**: VSIXビルド（`npm run build-latest`）を**先に実行**することで:
   - `package.json`のバージョンが更新されます
   - 変更仕様書をコミットする際、更新されたバージョン情報がコミットメッセージとタグに反映されます
   - 変更仕様書のタイトルから抽出したバージョン番号と、`package.json`のバージョンが一致することを確認できます

4. **VSIXファイルのインストール/更新**

   **Cursor/VS Codeでのインストール手順:**
   1. 拡張機能タブを開く（`Ctrl+Shift+X` または `Cmd+Shift+X`）
   2. 右上の「...」メニュー（歯車アイコン）をクリック
   3. 「VSIXからのインストール」を選択
   4. `cursor-code-prettifier-latest.vsix` を選択

   **更新の場合:**
   - 同じ `cursor-code-prettifier-latest.vsix` ファイルで再インストールするだけで更新されます
   - **アンインストール不要**（上書きインストール）

### ビルドコマンドの詳細

#### `npm run build-latest`（推奨）

固定名のVSIXファイルを作成します。推奨される方法です。

- 実行内容:
  - `npm run bump-version`: バージョン番号を更新
  - `scripts/inject-release-notes.js`: リリースノートを自動注入
  - `npm run compile`: TypeScriptをコンパイル
  - `npx vsce package`: VSIXパッケージを作成
  - 古いVSIXファイルを `old/` ディレクトリにアーカイブ
  - 最新のVSIXファイルを `cursor-code-prettifier-latest.vsix` にコピー

- 出力:
  - `cursor-code-prettifier-latest.vsix`: 固定名のVSIXファイル（常に最新版）

#### その他のビルドコマンド

```bash
# クイックビルド（バージョン更新なし）
npm run build-quick

# 通常ビルド（バージョン付きファイル名で作成）
npm run build
```

### 完全な更新ワークフロー例

```bash
# 1. 変更仕様書を編集
# ... changement/v00_01_31_feature_name.md を作成/編集 ...

# 2. VSIXファイルをビルド（この時点で package.json のバージョンが更新される）
npm run build-latest

# 3. 変更仕様書をコミット（更新されたバージョン情報がコミットメッセージとタグに反映される）
npm run commit-latest-spec -- --push

# 4. Cursor/VS Codeでインストール
# - 拡張機能タブ → 「...」 → 「VSIXからのインストール」
# - cursor-code-prettifier-latest.vsix を選択
```

**重要**: 必ず **VSIXビルド → コミット** の順序で実行してください。
- VSIXビルドで`package.json`のバージョンが更新されます
- その後にコミットすることで、更新されたバージョンがタグに反映されます

### VSIXファイルの場所

- **固定名ファイル**: `cursor-code-prettifier-latest.vsix`（推奨、常に最新版）
- **バージョン付きファイル**: `cursor-code-prettifier-{version}.vsix`（例: `cursor-code-prettifier-0.1.30.vsix`）
- **アーカイブ**: `old/` ディレクトリ内に古いバージョンが保存されます

### 注意事項

- **固定名ファイル**: `cursor-code-prettifier-latest.vsix` は常に最新のビルドを指します
- **更新時**: 同じファイルで再インストールするだけで更新されます（アンインストール不要）
- **バージョン管理**: `build-latest` 実行時に自動的にバージョンが更新されます
- **リリースノート**: `build-latest` 実行時に自動的に README.md と CHANGELOG.md に最新の変更内容が追加されます
