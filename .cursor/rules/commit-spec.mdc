---
alwaysApply: false
---

# 変更仕様書の自動コミット

`changement/`ディレクトリ内の最新の仕様書ドキュメントを自動的にgit addしてコミットする。

## 実行手順

1. **最新の仕様書ファイルを検索**
   - `changement/`ディレクトリ内の`.md`ファイルを検索
   - `_`で始まらないファイルのみを対象とする
   - 最終更新日時が最新のファイルを1件選択
   - `list_dir`でディレクトリ内容を取得し、`read_file`やファイルシステムのタイムスタンプで最新を判定

2. **Git ステージング**
   - 見つかったファイルを`git add`でステージング
   - 対象ファイルのみを追加（他の変更は含めない）

3. **コミット実行**
   - コミットメッセージ: `doc: <ファイル名> added`
   - ファイル名は拡張子を除いたベース名（例: `v00_01_31_20250126_1430_log_feature_addition.md` → `v00_01_31_20250126_1430_log_feature_addition`）

## 実装コマンド

1. `list_dir`で`changement/`ディレクトリの内容を取得
2. `.md`ファイルで`_`で始まらないものをフィルタリング
3. 最新のファイルを特定（ファイルのタイムスタンプまたは`read_file`で内容確認）
4. `run_terminal_cmd`で`git add <file_path>`を実行
5. `run_terminal_cmd`で`git commit -m "doc: <file_name> added"`を実行

## 注意事項

- `changement/`ディレクトリが存在しない場合はエラーを出力
- 対象ファイルが見つからない場合はスキップ（エラーにはしない）
- 既にコミット済みのファイル（差分がない）の場合は、gitが「nothing to commit」を返すが、それは正常な動作として扱う
- 他の変更がステージングされていないことを確認（必要に応じて`git status`で確認）

## 使用例

**実行結果**:
- 最新ファイル: `changement/v00_01_31_20250126_1430_log_feature_addition.md`
- 実行コマンド: 
  - `git add changement/v00_01_31_20250126_1430_log_feature_addition.md`
  - `git commit -m "doc: v00_01_31_20250126_1430_log_feature_addition added"`

## エラーハンドリング

- ファイルが見つからない場合: メッセージを出力して終了（エラーコード0）
- `git add`が失敗した場合: エラーメッセージを出力して終了（エラーコード非0）
- `git commit`が失敗した場合: エラーメッセージを出力して終了（エラーコード非0）
- 既にコミット済みの場合: 「Already committed」などのメッセージを出力（正常終了）
