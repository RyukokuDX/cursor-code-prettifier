---
alwaysApply: false
---

# 変更要件から仕様書の自動作成

ユーザーから変更要件を受け取った場合、**自動的に以下の手順で仕様書を作成する**:

## 実行手順

1. **バージョン番号の取得と計算**
   - `package.json` を読み込み、`version` フィールドから現在のバージョンを取得（例: `"0.1.30"`）
   - patch番号を1増やす（例: `0.1.30` → `0.1.31`）
   - ファイル名用に変換: `0.1.31` → `v00_01_31`（ゼロパディング、ドットをアンダースコアに変換）

2. **日時の取得**
   - 現在の日時を取得
   - フォーマット: `yyyymmdd_hhmm`（例: `20250126_1430`）

3. **サマリーの生成**
   - 変更要件から主要なキーワードを抽出（20-30文字程度）
   - 日本語の場合はローマ字表記または英語に変換
   - 空白・特殊文字をアンダースコアに置換
   - すべて小文字に変換
   - 例: "ログ機能追加" → `log_feature_addition`

4. **ファイル名の生成**
   - 形式: `v{version}_{date}_{time}_{summary}.md`
   - 例: `v00_01_31_20250126_1430_log_feature_addition.md`
   - 保存先: `changement/` ディレクトリ（存在しない場合は作成）

5. **仕様書の作成**
   - 以下のテンプレートを使用して仕様書を作成:
     ```markdown
     # 変更仕様 v{version}: {summary}
     
     ## 背景
     {変更要件の背景情報を記載}
     
     ## 目的
     {変更要件の目的を記載}
     
     ## スコープ
     {変更要件の適用範囲を記載}
     
     ## 仕様（詳細）
     {変更要件の詳細仕様を記載}
     
     ## 受け入れ基準
     {受け入れ基準を記載}
     ```
   - 変更要件から必要な情報を抽出して各セクションに記入

## 実装コマンド

変更要件を受け取ったら、以下のコマンドを順次実行:
1. `read_file` で `package.json` を読み込み、バージョンを取得
2. バージョンのpatch番号を計算
3. 現在の日時を取得し、指定フォーマットに変換
4. 変更要件からサマリーを生成
5. ファイル名を組み立て
6. `write` ツールで `changement/{filename}` に仕様書を作成

## 注意事項

- `changement/` ディレクトリが存在しない場合は `list_dir` で確認後、必要に応じて作成
- バージョン番号は必ず `package.json` から動的に取得（固定値は使用しない）
- 日時は実行時の現在時刻を使用
- ファイル名に使用できない文字（`/`, `\`, `:`, `*`, `?`, `"`, `<`, `>`, `|`）は含めない
- 日本語をローマ字に変換する際は、主要なキーワードのみ抽出

## 使用例

**ユーザー入力**: "ログ機能を追加したい。エラー時にコンソールに出力する。"

**自動実行結果**:
- バージョン: `0.1.30` → `0.1.31` → `v00_01_31`
- 日時: `20250126_1430`
- サマリー: `log_feature_addition`
- ファイル名: `changement/v00_01_31_20250126_1430_log_feature_addition.md`
- 仕様書をテンプレートに基づいて作成